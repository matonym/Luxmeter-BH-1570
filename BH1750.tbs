include "global.tbh"

dim SSI_SDA as pl_io_num = PL_IO_NUM_42	
dim SSI_SCL as pl_io_num = PL_IO_NUM_43	
dim SSI_Channel as byte = 2

dim BH1750_Addr as BH1750_Address = AddrL

Sub i2c_start()
	io.num = SSI_SDA ' Set SDA as output
	io.enabled = YES
	
	io.lineset(SSI_SCL, HIGH)
	io.lineset(SSI_SDA, HIGH)
	io.lineset(SSI_SDA, LOW)
	io.lineset(SSI_SCL, LOW)
End Sub

'------------------------------------------------------------ 

Sub i2c_stop()
	io.num = SSI_SDA
	io.enabled = YES

	io.lineset(SSI_SDA, LOW)
	io.lineset(SSI_SCL, HIGH)
	io.lineset(SSI_SDA, HIGH)
End Sub

sub i2c_write(data as byte)
	ssi.channel = SSI_Channel
	ssi.str(chr(data), PL_SSI_ACK_RX)
end sub

' brief Read byte of data from I2C port
' returns 8 bits of data readed
function i2c_read(acknak_request as boolean) as byte
		dim ackornot as word
		dim res as byte= 0
		
		if acknak_request then
			ackornot=&HFFFE
		else
			ackornot=&HFFFE			
		end if
		
		ssi.channel = SSI_Channel
		dim tmp as byte = ssi.value(ackornot, 9) shr 1
		
		res = tmp and &H00FF
		i2c_read = res
end function

function i2c_read_from(addr as byte, acknak_request as boolean) as byte
		
		dim res as byte= 0		
		dim toAdr as byte
		dim orvalue as byte
		
		if (acknak_request) then 
			orvalue = 1
		else
			orvalue = 0
		end if
		toAdr = (addr shl 1) or orvalue ' To manage | 1011100 | 1
		
		ssi.channel = SSI_Channel
		dim tmp as byte = ssi.value(toAdr, 9) shr 1
		
		res = tmp and &H00FF
		i2c_read_from = res
end function

'sub i2c_write(data as byte)
'	ssi.channel = SSI_Channel
'	ssi.str(chr(data), PL_SSI_ACK_RX)
'end sub

function _detect(addr as byte) as boolean

    dim toAdr as byte = addr shl 1

	ssi.channel = SSI_Channel
	dim s as string = ssi.str(chr(toAdr) + chr(0), PL_SSI_ACK_RX)
	dim res as boolean = (len(s) = 2)
	
	if res then
	  'sys.debugprint(s)	
	end if
	
	

	_detect = res
	
end function

function i2c_detect(addr as byte) as boolean
	dim res as boolean

	i2c_start()
	res = _detect(addr)
	i2c_stop()
	
	i2c_detect = res
end function


function i2c_port_scan() as string

	dim res as string(127) = ""

	dim i as byte
	
	for i=1 to 127	
		if(i2c_detect(i shl 1)) then res = res + chr(i)			
	next
			
	i2c_port_scan = res
end function

' Scan for all I2C addresses. Returns a string containg addresses
function BH1750_ScanForAddresses() as string
	dim i as integer
	dim res as string(127)
	
	for i = 1 to 127
		if i2c_Detect(i)	then res = res + chr(i)
	next i
	
	BH1750_ScanForAddresses res
end function

function BH1750_FindDeviceAddress() as BH1750_Address	
    dim res as BH1750_Address = 0

	if i2c_Detect(AddrL) then res = AddrL 
	if i2c_Detect(AddrH) then res = AddrH 
	
	BH1750_FindDeviceAddress = res
end function

sub i2c_send(addr as byte, data as byte)
	i2c_start()
	i2c_write(addr)
	i2c_write(data)		
	i2c_stop() 	
end sub

' ============================================================================================

' 
' Send "One time L-resolution mode" instruction

' Send "Continuously H-resolution mode" instruction
' ST | 0100011 | 0 | Ack | 00010000 | Ack | SP
'        35 (0x23)         16 (0x10)

sub BH1750_Send(addr as byte, data as byte)
	dim toAdr as byte
	
	toAdr = (addr shl 1) or 0 ' To manage | 1011100 | 0 

	i2c_start()
	
	dim res as string = ssi.str(chr(toAdr)+chr(data), PL_SSI_ACK_RX)
		
	i2c_stop() 	
end sub

function BH1750_Read(addr as byte) as word
	dim toAdr as byte
	
	toAdr = (addr shl 1) or 1 ' To manage | 1011100 | 1 
   	
	i2c_start()

	i2c_write(toAdr)
	
	dim highb as byte= i2c_Read(true)
	dim lowb as byte= i2c_Read(true)
	
	dim resw as word = highb
	
	resw = resw shl 8
	resw = resw or lowb
	
	dim resf as float
	
	resf = resw
	resf = resf / 1.2
	
	resw = resf
		
	i2c_stop() 	
	
	BH1750_Read = resw
end function

sub BH1750_Init(SSIChannel as byte, ClockPin as pl_io_num, DataPin as pl_io_num, Address as BH1750_Address)
    SSI_SCL = ClockPin
	SSI_SDA = DataPin
	SSI_Channel = SSIChannel
	BH1750_Addr = Address

	io.num = SSI_SCL ' Set SCL as output, HIGH
	io.state = HIGH
	io.enabled = YES
	io.num = SSI_SDA ' Set SDA as input, HIGH
	io.state = HIGH
	io.enabled = NO

	ssi.channel=SSI_Channel
	ssi.enabled=NO
	ssi.baudrate=100
	ssi.clkmap=SSI_SCL
	ssi.domap=SSI_SDA
	ssi.dimap=SSI_SDA
	ssi.direction=PL_SSI_DIRECTION_LEFT
	ssi.zmode= PL_SSI_ZMODE_ENABLED_ON_ZERO
	ssi.mode=PL_SSI_MODE_0

	ssi.enabled=YES
		
end sub

function BH1750_GetLux() as word
	i2c_start()
	BH1750_GetLux = BH1750_Read(BH1750_Addr)
	i2c_stop()	
end function

sub BH1750_Powerup()
	BH1750_Send(BH1750_Addr, StatePowerUp)	
end sub

sub BH1750_SetMode(mode as BH1750_Modes)
	BH1750_Send(BH1750_Addr, mode)	
end sub
